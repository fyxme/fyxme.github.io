<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>fyx(me) – Breaking Changes</title><link>https://fyx.me/tags/breaking-changes/</link><description>Recent content in Breaking Changes on fyx(me)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://fyx.me/tags/breaking-changes/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://fyx.me/bazaar/computer-science--programming/versioning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fyx.me/bazaar/computer-science--programming/versioning/</guid><description>
&lt;h3>Semver : Semantic versioning&lt;span class="hx-absolute -hx-mt-20" id="semver--semantic-versioning">&lt;/span>
&lt;a href="#semver--semantic-versioning" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;blockquote>
&lt;p>ref: &lt;a href="https://semver.org/" target="_blank" rel="noopener">https://semver.org/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Given a version number MAJOR.MINOR.PATCH, increment the:&lt;/p>
&lt;ol>
&lt;li>MAJOR version when you make incompatible API changes&lt;/li>
&lt;li>MINOR version when you add functionality in a backward compatible manner&lt;/li>
&lt;li>PATCH version when you make backward compatible bug fixes&lt;/li>
&lt;/ol>
&lt;p>Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.&lt;/p>
&lt;p>Other ref:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.conventionalcommits.org/en/v1.0.0/" target="_blank" rel="noopener">https://www.conventionalcommits.org/en/v1.0.0/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3>Conventional commits&lt;span class="hx-absolute -hx-mt-20" id="conventional-commits">&lt;/span>
&lt;a href="#conventional-commits" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-flex-col hx-rounded-lg hx-border hx-py-4 hx-px-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-orange-100 hx-bg-orange-50 hx-text-orange-800 dark:hx-border-orange-400/30 dark:hx-bg-orange-400/20 dark:hx-text-orange-300">
&lt;p class="hx-flex hx-items-center hx-font-medium">Tldr&lt;/p>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">&lt;p>&lt;strong>Commit formats:&lt;/strong> &lt;code>feat(parser): add ability to parse arrays&lt;/code> &lt;br>
&lt;strong>Tags:&lt;/strong> &lt;code>feat, fix, build, chore, ci, docs, style, refactor, perf, test&lt;/code>&lt;br>
&lt;strong>Breaking changes:&lt;/strong> a footer &lt;code>BREAKING CHANGE:&lt;/code>, or appends a &lt;code>!&lt;/code> after the type/scope (eg. &lt;code>fix(parser)!: fixed CVE-XXX by adding input validation&lt;/code>)&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>The Conventional Commits specification is a lightweight convention on top of commit messages. It provides an easy set of rules for creating an explicit commit history; which makes it easier to write automated tools on top of. This convention dovetails with &lt;a href="http://semver.org" target="_blank" rel="noopener">SemVer&lt;/a>, by describing the features, fixes, and breaking changes made in commit messages.&lt;/p>
&lt;p>The commit message should be structured as follows:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>&amp;lt;type&amp;gt;[optional scope]: &amp;lt;description&amp;gt;
[optional body]
[optional footer(s)]&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>The commit contains the following structural elements, to communicate intent to the consumers of your library:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>fix:&lt;/strong> a commit of the &lt;em>type&lt;/em> &lt;code>fix&lt;/code> patches a bug in your codebase (this correlates with &lt;code>PATCH&lt;/code> in Semantic Versioning).&lt;/li>
&lt;li>&lt;strong>feat:&lt;/strong> a commit of the &lt;em>type&lt;/em> &lt;code>feat&lt;/code> introduces a new feature to the codebase (this correlates with &lt;code>MINOR&lt;/code> in Semantic Versioning).&lt;/li>
&lt;li>&lt;strong>BREAKING CHANGE:&lt;/strong> a commit that has a footer &lt;code>BREAKING CHANGE:&lt;/code>, or appends a &lt;code>!&lt;/code> after the type/scope, introduces a breaking API change (correlating with &lt;code>MAJOR&lt;/code> in Semantic Versioning). A BREAKING CHANGE can be part of commits of any &lt;em>type&lt;/em>.&lt;/li>
&lt;li>&lt;em>types&lt;/em> other than &lt;code>fix:&lt;/code> and &lt;code>feat:&lt;/code> are allowed, for example &lt;a href="https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional" target="_blank" rel="noopener">@commitlint/config-conventional&lt;/a> (based on the &lt;a href="https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines" target="_blank" rel="noopener">Angular convention&lt;/a>) recommends &lt;code>build:&lt;/code>, &lt;code>chore:&lt;/code>, &lt;code>ci:&lt;/code>, &lt;code>docs:&lt;/code>, &lt;code>style:&lt;/code>, &lt;code>refactor:&lt;/code>, &lt;code>perf:&lt;/code>, &lt;code>test:&lt;/code>, and others.&lt;/li>
&lt;li>&lt;em>footers&lt;/em> other than &lt;code>BREAKING CHANGE: &amp;lt;description&amp;gt;&lt;/code> may be provided and follow a convention similar to &lt;a href="https://git-scm.com/docs/git-interpret-trailers" target="_blank" rel="noopener">git trailer format&lt;/a>.&lt;/li>
&lt;/ol>
&lt;p>Additional types are not mandated by the Conventional Commits specification, and have no implicit effect in Semantic Versioning (unless they include a BREAKING CHANGE). A scope may be provided to a commit’s type, to provide additional contextual information and is contained within parenthesis, e.g., &lt;code>feat(parser): add ability to parse arrays&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>Ref: &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/" target="_blank" rel="noopener">https://www.conventionalcommits.org/en/v1.0.0/&lt;/a>&lt;/p>
&lt;/blockquote></description></item></channel></rss>