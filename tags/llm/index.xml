<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>fyx(me) â€“ LLM</title><link>https://fyx.me/tags/llm/</link><description>Recent content in LLM on fyx(me)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 15 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://fyx.me/tags/llm/index.xml" rel="self" type="application/rss+xml"/><item><title>Building a Flask Blog in 3 prompts with AI Coding Tools: Using Cline &amp; MCP Servers in VSCode</title><link>https://fyx.me/minis/building-a-flask-blog-with-ai-coding-tools-using-cline-mcp-servers-in-vscode/</link><pubDate>Tue, 15 Apr 2025 00:00:00 +0000</pubDate><guid>https://fyx.me/minis/building-a-flask-blog-with-ai-coding-tools-using-cline-mcp-servers-in-vscode/</guid><description>
&lt;p>On my journey to get up to date with Large Language Models (LLMs) and other Artificial Intelligence (AI) advances, I&amp;rsquo;ve been playing around with AI coding tools. While I usually prefer (neo)vim for coding, I found that IDE integrated tools are currently more polished and more convenient to use. I will do more exploration with neovim plugins and might even write my own but I&amp;rsquo;m the meantime I&amp;rsquo;ll play around with VSCode and it&amp;rsquo;s open source AI extensions like &lt;a href="https://github.com/cline/cline" target="_blank" rel="noopener">Cline&lt;/a> and &lt;a href="https://github.com/RooVetGit/Roo-Code" target="_blank" rel="noopener">Roo Code&lt;/a> (which are alternatives to &lt;a href="https://www.cursor.com/en" target="_blank" rel="noopener">Cursor&lt;/a>).&lt;/p>
&lt;h2>Using a coding Agent from the VSCode IDE&lt;span class="hx-absolute -hx-mt-20" id="using-a-coding-agent-from-the-vscode-ide">&lt;/span>
&lt;a href="#using-a-coding-agent-from-the-vscode-ide" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>As a quick example, here&amp;rsquo;s Cline using Deepseek chat v3 to generate a simple webpage for the following prompt:&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/Cline%20prompt%20HTML%20blinking.dog%20centered.webp" title="Cline prompt for an HTML page with blinking.dog gif centered " alt="" loading="lazy" />
&lt;figcaption>Cline prompt for an HTML page with blinking.dog gif centered &lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-flex-col hx-rounded-lg hx-border hx-py-4 hx-px-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200">
&lt;p class="hx-flex hx-items-center hx-font-medium">&lt;svg height=16px class="hx-inline-block hx-align-middle hx-mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>&lt;/svg>Note&lt;/p>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">&lt;p>You can make use of openrouter to use &lt;a href="https://openrouter.ai/models?q=free" target="_blank" rel="noopener">free models&lt;/a> with Cline.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Cline allows you to see the changes made to the files it modifies and you can approve them if you&amp;rsquo;re happy with those. Furthermore, it gives you API costs, context window usage and other data that might be useful to monitor what the Agent is doing:&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/VSCode%20Cline%20Generated%20HTML%20page.webp" title="VSCode Cline Generated HTML page" alt="" loading="lazy" />
&lt;figcaption>VSCode Cline Generated HTML page&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Even though this is a pretty simple task, the result is really good, the webpage displays the GIF and centered it properly:&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/blinking.dog%20HTML%20centered%20rendered.webp" title="Resulting HTML page with blinking.dog gif centered" alt="" loading="lazy" />
&lt;figcaption>Resulting HTML page with blinking.dog gif centered&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>This is a pretty basic example and you can get them to work on much more complex tasks but this highlights the potential time saves that AI can bring you (when it doesn&amp;rsquo;t hallucinate buggy code).&lt;/p>
&lt;h2>Using MCP servers and AI agents to create a static blog&lt;span class="hx-absolute -hx-mt-20" id="using-mcp-servers-and-ai-agents-to-create-a-static-blog">&lt;/span>
&lt;a href="#using-mcp-servers-and-ai-agents-to-create-a-static-blog" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>These agents have the ability to use tools and &lt;em>glorified API Servers&lt;/em> called Model Context Protocol (MCP) Servers. These provide a structured interface for the Agent to use various tools via endpoints that are defined in the MCP server. For example, this allows the Agent to talk to databases by implementing endpoints to execute SQL commands.&lt;/p>
&lt;h3>Installing MCP servers&lt;span class="hx-absolute -hx-mt-20" id="installing-mcp-servers">&lt;/span>
&lt;a href="#installing-mcp-servers" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>By going to the MCP Servers tab, you can view a list of the servers available and install a server. For example, here I installed SQLite which I use later on in this article:&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/Cline%20SQLite%20MCP%20server.webp" title="Cline MCP Servers tab" alt="" loading="lazy" />
&lt;figcaption>Cline MCP Servers tab&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>After clicking install, Cline actually uses an LLM to perform the installation which I was surprised about but makes sense. The agent may give you tasks too, like running x/y command and installing dependencies like &lt;code>uv&lt;/code>, read carefully what it returns:&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/Cline%20installing%20SQLite%20MCP%20server.webp" title="Cline installing SQLite MCP server" alt="" loading="lazy" />
&lt;figcaption>Cline installing SQLite MCP server&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-flex-col hx-rounded-lg hx-border hx-py-4 hx-px-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200">
&lt;p class="hx-flex hx-items-center hx-font-medium">&lt;svg height=16px class="hx-inline-block hx-align-middle hx-mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">&lt;path stroke-linecap="round" stroke-linejoin="round" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>&lt;/svg>Note&lt;/p>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">&lt;p>A lot of these MCP servers use &lt;a href="https://pypi.org/project/uv/" target="_blank" rel="noopener">uv&lt;/a> which you&amp;rsquo;ll need installed. To install, &lt;code>pipx install uv&lt;/code> (or &lt;code>pip install uv&lt;/code> if you&amp;rsquo;re sinning and not using pipx)&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3>Using MCP servers&lt;span class="hx-absolute -hx-mt-20" id="using-mcp-servers">&lt;/span>
&lt;a href="#using-mcp-servers" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>If done properly you should now have an MCP server installed and you can request the Agent to use it to perform task. For example, with the SQLite server I installed above, I&amp;rsquo;m able to ask the agent to create a new table and I can specify the columns I need. The agent will then generate the SQL command required to create the blog and use the &lt;code>create_table&lt;/code> tool that is exposed via the MCP server as such:&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/Cline%20interacting%20with%20SQLite%20MCP%20server.webp" title="Cline interacting with SQLite MCP server" alt="" loading="lazy" />
&lt;figcaption>Cline interacting with SQLite MCP server&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>With that table created we can ask it to populate it directly, for example requesting it to generate a blog that answers the following question: &amp;ldquo;What is the best privacy tool to install in 2025?&amp;rdquo;. It then generates the title, description, tags and the content for the blog and uses the SQLite MCP server to add the blog to the database using the &lt;code>write_query&lt;/code> functionality provided by the MCP server:&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/Cline%20write%20to%20database%20with%20SQLite%20MCP%20server.webp" title="Cline write to database with SQLite MCP server" alt="" loading="lazy" />
&lt;figcaption>Cline write to database with SQLite MCP server&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Pretty awesome already!&lt;/p>
&lt;h3>Creating a simple Flask blog&lt;span class="hx-absolute -hx-mt-20" id="creating-a-simple-flask-blog">&lt;/span>
&lt;a href="#creating-a-simple-flask-blog" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>With that done, we can ask it to create a small python application to showcase our blog post. Since we asked it to generate the content in markdown, we need to make sure that it properly converts it to HTML before displaying it:&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/Cline%20create%20simple%20flask%20blog%20app.webp" title="Cline creating a simple flask blog app with SQLite database created previously" alt="" loading="lazy" />
&lt;figcaption>Cline creating a simple flask blog app with SQLite database created previously&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>This results in the following &lt;code>app.py&lt;/code> file being created with a simple route which retrieves the blog posts and displays them:&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/Cline%20generated%20simple%20Flask%20blog%20with%20SQLite%20storage.webp" title="Cline generated simple Flask blog with SQLite storage" alt="" loading="lazy" />
&lt;figcaption>Cline generated simple Flask blog with SQLite storage&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>It also generates a simple template to render the blog post view:&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/Cline%20generated%20simple%20Flask%20blog%20index%20template.webp" title="Cline generated simple Flask blog index template" alt="" loading="lazy" />
&lt;figcaption>Cline generated simple Flask blog index template&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>And when we serve it, we get the following:&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/Simple%20Flask%20Blog%20result%20in%20browser.webp" title="Simple Flask Blog result in browser" alt="" loading="lazy" />
&lt;figcaption>Simple Flask Blog result in browser&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Not too bad considering this took us exactly 3 prompts to go from nothing to a Flask blog application with a populated SQLite database! There seems to be a small issue with the display and the newlines don&amp;rsquo;t appear to be converted properly but we can relay that information to the Agent and ask it to fix it for us, which it does without much trouble:&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/Cline%20fix%20markdown%20newline%20issue.webp" title="Cline fix markdown newline issue" alt="" loading="lazy" />
&lt;figcaption>Cline fix markdown newline issue&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>And our rendered blog is not too bad:&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/Final%20result%20for%20Simple%20Flask%20blog.webp" title="Final result for Simple Flask blog" alt="" loading="lazy" />
&lt;figcaption>Final result for Simple Flask blog&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2>Conclusion&lt;span class="hx-absolute -hx-mt-20" id="conclusion">&lt;/span>
&lt;a href="#conclusion" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Overall a simple but great example showcasing what might be possible with AI tools and integrations. The whole process took only four (4) prompts to go from a blank canvas to a populated Flask blog with SQLite database storage.&lt;/p>
&lt;p>As AI models improvements slow down, the next step will be looking at how to integrate the models into everyday tools that we use. MCP servers seems like a promising idea to extend Agents and make them more capable. They still need to be supervised as they make mistakes and may not always make the best choices but as shown above, they can speed up the development of things quite drastically.&lt;/p></description></item><item><title>Leveraging AI to Automate SEO Metadata Generation for Web Content</title><link>https://fyx.me/minis/leveraging-ai-to-automate-seo-metadata-generation-for-web-content/</link><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid>https://fyx.me/minis/leveraging-ai-to-automate-seo-metadata-generation-for-web-content/</guid><description>
&lt;p>I&amp;rsquo;ve been playing around with AI for the past few weeks, trying to test its limit, bypass security features, check its use cases and see how it can be leverage for every day work (eg. programming, information gathering, research and more). One thing I&amp;rsquo;ve realised is how hard it is to keep up with the insane amount of things that are being created with it, new research dropping constantly and the tools evolving at a rapid pace.&lt;/p>
&lt;p>I&amp;rsquo;ve also wanted to learn more about SEO for a while and use this blog as a playground. This seemed like the perfect use case to try and integrate AI into the deployment workflow for this website and generate SEO components such as page descriptions, post titles and more.&lt;/p>
&lt;h2>Unified interfaces for Large Language Models (LLM API providers)&lt;span class="hx-absolute -hx-mt-20" id="unified-interfaces-for-large-language-models-llm-api-providers">&lt;/span>
&lt;a href="#unified-interfaces-for-large-language-models-llm-api-providers" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>I currently don&amp;rsquo;t have the hardware resources to run large language models locally and since I wanted to learn more about how each model differs from one another, I&amp;rsquo;ve settled on using &lt;a href="https://openrouter.ai/" target="_blank" rel="noopener">openrouter.ai&lt;/a>. They provide an API interface to different model providers and allow you to use 383 different models (at the time of writing), including a number of free models (great for testing).&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/openrouter.ai%20available%20models.webp" title="openrouter.ai Available Models" alt="" loading="lazy" />
&lt;figcaption>openrouter.ai Available Models&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>To use the model via openrouter, you need to an LLM Frontend such as &lt;a href="https://sillytavern.app/" target="_blank" rel="noopener">SillyTavern&lt;/a>, &lt;a href="https://openwebui.com/" target="_blank" rel="noopener">Open WebUI&lt;/a> or &lt;a href="https://www.librechat.ai/" target="_blank" rel="noopener">LibreChat&lt;/a>. There&amp;rsquo;s so many out there but these seem to be the most popular (other than the built-in Web UIs). They all get constantly updated to support the newest bells and whistles like MCP servers and tools, chat history and more.&lt;/p>
&lt;p>However, if you&amp;rsquo;re going to build stuff with AI, you&amp;rsquo;ll need to find a library to integrate models into your code (or build your own). Again, there&amp;rsquo;s so many of them out there and the landscape is changing constantly but a few currently seem to stand out. For this small project, I wanted to try out one of the frameworks that seemed very promising due to the integrations it has, great documentation and strong coding practices, namely I wanted to use &lt;a href="https://github.com/agno-agi/agno" target="_blank" rel="noopener">Agno&lt;/a>. The examples they had really sold me on the framework plus the ability to request &lt;a href="https://docs.agno.com/agents/structured-output" target="_blank" rel="noopener">structured output&lt;/a> which made this extremely easy.&lt;/p>
&lt;p>Using the framework, it took little time to write a program that takes in a file, reads it in, sends the content to an Agent and request it to generate SEO metadata.&lt;/p>
&lt;h2>Using an AI agent to generate SEO optimised metadata&lt;span class="hx-absolute -hx-mt-20" id="using-an-ai-agent-to-generate-seo-optimised-metadata">&lt;/span>
&lt;a href="#using-an-ai-agent-to-generate-seo-optimised-metadata" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>I use Hugo to convert my markdown content into a static website. The pages can contain metadata stored at the top of the page using the &lt;a href="https://gohugo.io/content-management/front-matter/" target="_blank" rel="noopener">front matter&lt;/a> format. This allows us to modify the output &lt;code>title&lt;/code>, &lt;code>description&lt;/code>, &lt;code>tags/keywords&lt;/code> and more. As such, this is what we&amp;rsquo;ll update with this tool before generating out site.&lt;/p>
&lt;p>This was the initial script I used, with really dump prompts, no optimisations, nothing special honestly (I&amp;rsquo;ve even left the comments in to show you how little effort this required):&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/Agno%20SEO%20metadata%20generation%20Python%20tool.webp" title="Python script using Agno to generate SEO metadata" alt="" loading="lazy" />
&lt;figcaption>Python script using Agno to generate SEO metadata&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>This worked surprising well and with some small tweaks, you can see the results:&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/SEO%20tool%20outcome%20simple.webp" title="fieldsgen.py example output" alt="" loading="lazy" />
&lt;figcaption>fieldsgen.py example output&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Depending on the model you&amp;rsquo;re using the inference speed takes more or less time but for such as simple task (as long as you don&amp;rsquo;t use reasoning models), this is fairly quick.&lt;/p>
&lt;p>It&amp;rsquo;s also extremely easy to switch out the models as you can see in the commented out code above. Changing the models produces different outputs and allows you to identify the best model for this sort of task:&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/SEO%20tool%20outcome%20AI%20model%20comparaison.webp" title="fieldsgen.py example output with different Models" alt="" loading="lazy" />
&lt;figcaption>fieldsgen.py example output with different Models&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Sometimes, the models may not cooperate and provide output in the wrong format which causes errors:&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/Agno%20SEO%20tool%20errors.webp" title="fieldsgen.py example error" alt="" loading="lazy" />
&lt;figcaption>fieldsgen.py example error&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Thankfully, by searching the Agno documentation (using their builtin AI search because we&amp;rsquo;re in the theme of AI), we find an easy solution for &lt;a href="https://docs.agno.com/models/introduction#error-handling" target="_blank" rel="noopener">error handling&lt;/a> to retry on failure:&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/Agno%20Documentation%20AI%20search.webp" title="Agno Documentation answer with AI" alt="" loading="lazy" />
&lt;figcaption>Agno Documentation answer with AI&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/AI%20Documentation%20AI%20Search%20Response.webp" title="Agno Documentation answer with AI response" alt="" loading="lazy" />
&lt;figcaption>Agno Documentation answer with AI response&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>It&amp;rsquo;s not super robust but for our use-case is good enough:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">agent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Agent&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">OpenRouter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;openrouter/optimus-alpha&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">description&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;You are an SEO specialist who generates SEO optimised metadata&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">response_model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">SEOPage&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exponential_backoff&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">retries&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>It&amp;rsquo;s still not perfect, sometimes returns weird keywords, and does sometime return the same keyword/tags more than once but with more tweaking, additional code checks and finding the optimal model for this task, it will help generate SEO metadata for the site&amp;rsquo;s pages (especially pages that I&amp;rsquo;m not too concerned about like the &lt;a href="https://fyx.me/bazaar" >bazaar&lt;/a> pages).&lt;/p>
&lt;h2>Outcome&lt;span class="hx-absolute -hx-mt-20" id="outcome">&lt;/span>
&lt;a href="#outcome" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>As an example, here is the SEO description and tags generated for the &lt;a href="https://fyx.me/bazaar/computer-science--programming/file-synchronisation/" >file synchronisation&lt;/a> cheatsheet in the bazaar (note the weird CLI parameter used as a tag &amp;ldquo;-avPh&amp;rdquo;):&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/File%20synchronisation%20with%20SEO%20metadata%20tags.webp" title="File Synchronisation markdown file with generated metadata viewed in Obsidian" alt="" loading="lazy" />
&lt;figcaption>File Synchronisation markdown file with generated metadata viewed in Obsidian&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Here&amp;rsquo;s what it looks like on the front-end with the SEO metadata set in the HTML head element:&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../img/File%20Synchronisation%20HTML%20rendered%20with%20SEO%20metadata.webp" title="File Synchronisation rendered after Hugo generates the HTML page" alt="" loading="lazy" />
&lt;figcaption>File Synchronisation rendered after Hugo generates the HTML page&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Honestly, pleasantly surprised considering this is a page with limited content.&lt;/p>
&lt;h2>Conclusion&lt;span class="hx-absolute -hx-mt-20" id="conclusion">&lt;/span>
&lt;a href="#conclusion" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Overall, a lot of potential and in my opinion some good use cases for AI. Still quite a bit of work to do to optimise everything, improve error handling and make it generally more robust but great outcome as a Proof-of-Concept.&lt;/p>
&lt;p>Here&amp;rsquo;s the metadata it generated for this post:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>~/websites/fyx.me &amp;gt; python3 seo-generator/fieldsgen.py content/minis/AI\ SEO\ generation.md
[!] Model : google/gemini-2.5-pro-exp-03-25:free
Title : Leveraging AI to Automate SEO Metadata Generation for Web Content
Desc. : Explore how AI, specifically LLMs accessed via platforms like openrouter.ai and frameworks like Agno, can automate SEO metadata generation for Hugo websites. Learn about the process, tools, challenges, and potential of integrating AI into your deployment workflow.
Tags : [&amp;#39;AI&amp;#39;, &amp;#39;Artificial Intelligence&amp;#39;, &amp;#39;SEO&amp;#39;, &amp;#39;Search Engine Optimization&amp;#39;, &amp;#39;Metadata Generation&amp;#39;, &amp;#39;LLM&amp;#39;, &amp;#39;Large Language Models&amp;#39;, &amp;#39;openrouter.ai&amp;#39;, &amp;#39;Agno&amp;#39;, &amp;#39;Python&amp;#39;, &amp;#39;Automation&amp;#39;, &amp;#39;Hugo&amp;#39;, &amp;#39;Static Site Generator&amp;#39;, &amp;#39;API Integration&amp;#39;, &amp;#39;Workflow Automation&amp;#39;, &amp;#39;Structured Output&amp;#39;, &amp;#39;SEO Tools&amp;#39;]&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Lastly, I think AI in general is a great tool to help in speeding up workflows but as always it works even better when you validate/approve what it does. In this case review the metadata it generates and tweak it slightly.&lt;/p></description></item></channel></rss>